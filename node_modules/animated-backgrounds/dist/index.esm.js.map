{"version":3,"file":"index.esm.js","sources":["../src/backgroundAnimations.js","../src/AnimatedText.js","../src/index.js"],"sourcesContent":["/**\r\n * @module backgroundAnimations\r\n * @description Collection of animation functions with blend mode support\r\n */\r\n\r\n/**\r\n * Creates a starry night animation with blend modes\r\n */\r\nexport const starryNight = (canvas, ctx) => {\r\n    const stars = [];\r\n    for (let i = 0; i < 150; i++) {\r\n        stars.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            radius: Math.random() * 2,\r\n            vx: Math.floor(Math.random() * 50) - 25,\r\n            vy: Math.floor(Math.random() * 50) - 25,\r\n            twinkle: Math.random(),\r\n            color: `hsla(${Math.random() * 360}, 70%, 70%, 0.8)`\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(15, 23, 42, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n        \r\n        stars.forEach(star => {\r\n            star.twinkle += 0.02;\r\n            const opacity = Math.abs(Math.sin(star.twinkle));\r\n            \r\n            // Create glow effect\r\n            const gradient = ctx.createRadialGradient(\r\n                star.x, star.y, 0,\r\n                star.x, star.y, star.radius * 4\r\n            );\r\n            gradient.addColorStop(0, star.color);\r\n            gradient.addColorStop(1, 'transparent');\r\n            \r\n            ctx.beginPath();\r\n            ctx.arc(star.x, star.y, star.radius * 4, 0, Math.PI * 2);\r\n            ctx.fillStyle = gradient;\r\n            ctx.fill();\r\n            \r\n            // Draw star core\r\n            ctx.beginPath();\r\n            ctx.arc(star.x, star.y, star.radius, 0, Math.PI * 2);\r\n            ctx.fillStyle = `rgba(255, 255, 255, ${opacity})`;\r\n            ctx.fill();\r\n\r\n            star.x += star.vx / 60;\r\n            star.y += star.vy / 60;\r\n\r\n            if (star.x < 0 || star.x > canvas.width) star.vx = -star.vx;\r\n            if (star.y < 0 || star.y > canvas.height) star.vy = -star.vy;\r\n        });\r\n    };\r\n};\r\n\r\n/**\r\n * Creates floating bubbles animation with blend modes\r\n */\r\nexport const floatingBubbles = (canvas, ctx) => {\r\n    const bubbles = [];\r\n    for (let i = 0; i < 75; i++) {\r\n        bubbles.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            radius: Math.random() * 30 + 5,\r\n            speed: Math.random() * 0.7 + 0.1,\r\n            color: `hsla(${Math.random() * 360}, 70%, 60%, 0.6)`,\r\n            glowColor: `hsla(${Math.random() * 360}, 70%, 60%, 0.3)`\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(30, 41, 59, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        bubbles.forEach(bubble => {\r\n            // Create glow effect\r\n            const gradient = ctx.createRadialGradient(\r\n                bubble.x, bubble.y, 0,\r\n                bubble.x, bubble.y, bubble.radius * 2\r\n            );\r\n            gradient.addColorStop(0, bubble.glowColor);\r\n            gradient.addColorStop(1, 'transparent');\r\n            \r\n            ctx.beginPath();\r\n            ctx.arc(bubble.x, bubble.y, bubble.radius * 2, 0, Math.PI * 2);\r\n            ctx.fillStyle = gradient;\r\n            ctx.fill();\r\n            \r\n            // Draw bubble\r\n            ctx.beginPath();\r\n            ctx.arc(bubble.x, bubble.y, bubble.radius, 0, Math.PI * 2);\r\n            ctx.fillStyle = bubble.color;\r\n            ctx.fill();\r\n            \r\n            // Add highlight\r\n            ctx.beginPath();\r\n            ctx.arc(\r\n                bubble.x - bubble.radius * 0.3,\r\n                bubble.y - bubble.radius * 0.3,\r\n                bubble.radius * 0.2,\r\n                0,\r\n                Math.PI * 2\r\n            );\r\n            ctx.fillStyle = 'rgba(255, 255, 255, 0.6)';\r\n            ctx.fill();\r\n\r\n            bubble.y -= bubble.speed;\r\n            bubble.x += Math.sin(bubble.y * 0.03) * 0.5;\r\n            \r\n            if (bubble.y + bubble.radius < 0) {\r\n                bubble.y = canvas.height + bubble.radius;\r\n                bubble.x = Math.random() * canvas.width;\r\n            }\r\n        });\r\n    };\r\n};\r\n\r\n/**\r\n * Creates a starry gradientWave animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const gradientWave = (canvas, ctx) => {\r\n    let time = 0;\r\n\r\n    return () => {\r\n        time += 0.01;\r\n\r\n        const gradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);\r\n        gradient.addColorStop(0, `hsl(${time * 10 % 360}, 70%, 50%)`);\r\n        gradient.addColorStop(1, `hsl(${(time * 10 + 180) % 360}, 70%, 50%)`);\r\n\r\n        ctx.fillStyle = gradient;\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        for (let i = 0; i < 7; i++) {\r\n            ctx.beginPath();\r\n            ctx.moveTo(0, canvas.height * 0.15 * i + Math.sin(time + i) * 30);\r\n            for (let x = 0; x < canvas.width; x += 10) {\r\n                ctx.lineTo(x, canvas.height * 0.15 * i + Math.sin(time + i + x * 0.01) * 30);\r\n            }\r\n            ctx.strokeStyle = `rgba(255, 255, 255, ${0.1 - i * 0.01})`;\r\n            ctx.lineWidth = 2;\r\n            ctx.stroke();\r\n        }\r\n    };\r\n};\r\n/**\r\n * Creates a starry particleNetwork animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const particleNetwork = (canvas, ctx) => {\r\n    const particles = [];\r\n    const particleCount = 150;\r\n    const maxDistance = 120;\r\n\r\n    for (let i = 0; i < particleCount; i++) {\r\n        particles.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            radius: Math.random() * 3 + 1,\r\n            vx: Math.random() * 1.5 - 0.75,\r\n            vy: Math.random() * 1.5 - 0.75,\r\n            color: `hsl(${Math.random() * 360}, 70%, 70%)`\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(15, 23, 42, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        particles.forEach(particle => {\r\n            particle.x += particle.vx;\r\n            particle.y += particle.vy;\r\n\r\n            if (particle.x < 0 || particle.x > canvas.width) particle.vx *= -1;\r\n            if (particle.y < 0 || particle.y > canvas.height) particle.vy *= -1;\r\n\r\n            ctx.beginPath();\r\n            ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2);\r\n            ctx.fillStyle = particle.color;\r\n            ctx.fill();\r\n        });\r\n\r\n        for (let i = 0; i < particles.length; i++) {\r\n            for (let j = i + 1; j < particles.length; j++) {\r\n                const dx = particles[i].x - particles[j].x;\r\n                const dy = particles[i].y - particles[j].y;\r\n                const distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n                if (distance < maxDistance) {\r\n                    ctx.beginPath();\r\n                    ctx.moveTo(particles[i].x, particles[i].y);\r\n                    ctx.lineTo(particles[j].x, particles[j].y);\r\n                    ctx.strokeStyle = `rgba(255, 255, 255, ${1 - distance / maxDistance})`;\r\n                    ctx.lineWidth = 0.5;\r\n                    ctx.stroke();\r\n                }\r\n            }\r\n        }\r\n    };\r\n};\r\n\r\n\r\n/**\r\n * Creates a starry galaxySpiral animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const galaxySpiral = (canvas, ctx, speed = 0.0001) => {\r\n    const stars = initializeStars(canvas, 2000);\r\n    let rotation = 0;\r\n\r\n    function initializeStars(canvas, starCount) {\r\n        const stars = [];\r\n        for (let i = 0; i < starCount; i++) {\r\n            const distance = Math.random() * canvas.width * 0.4;\r\n            const angle = Math.random() * Math.PI * 2;\r\n            stars.push({\r\n                x: Math.cos(angle) * distance,\r\n                y: Math.sin(angle) * distance,\r\n                radius: Math.random() * 1.5 + 0.5,\r\n                color: `hsl(${Math.random() * 60 + 200}, 80%, 70%)`,\r\n                angle: angle,\r\n                distance: distance\r\n            });\r\n        }\r\n        return stars;\r\n    }\r\n\r\n    function drawStars(ctx, stars, rotation, speed) {\r\n        stars.forEach(star => {\r\n            const x = Math.cos(star.angle) * star.distance;\r\n            const y = Math.sin(star.angle) * star.distance;\r\n\r\n            ctx.beginPath();\r\n            ctx.arc(x, y, star.radius, 0, Math.PI * 2);\r\n            ctx.fillStyle = star.color;\r\n            ctx.fill();\r\n\r\n            // Adjust the angle increment here to control the speed of star rotation\r\n            star.angle += speed / (star.distance * 0.00008);\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(10, 10, 30, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        ctx.save();\r\n        ctx.translate(canvas.width / 2, canvas.height / 2);\r\n        ctx.rotate(rotation);\r\n\r\n        drawStars(ctx, stars, rotation, speed);\r\n\r\n        ctx.restore();\r\n        // Adjust the rotation increment here to control the speed of galaxy rotation\r\n        rotation += speed;\r\n    };\r\n};\r\n\r\n/**\r\n * Creates a starry rainbowWaves animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const rainbowWaves = (canvas, ctx) => {\r\n    let time = 0;\r\n    const waves = 7;\r\n    const colors = ['#FF0000', '#FF7F00', '#FFFF00', '#00FF00', '#0000FF', '#4B0082', '#8B00FF'];\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n        time += 0.02;\r\n\r\n        for (let i = 0; i < waves; i++) {\r\n            ctx.beginPath();\r\n            ctx.moveTo(0, canvas.height / 2);\r\n\r\n            for (let x = 0; x < canvas.width; x++) {\r\n                const y = Math.sin(x * 0.01 + time + i * 0.5) * 50 +\r\n                    Math.cos(x * 0.02 + time * 0.7 + i * 0.3) * 25 +\r\n                    canvas.height / 2;\r\n                ctx.lineTo(x, y);\r\n            }\r\n\r\n            ctx.strokeStyle = colors[i % colors.length];\r\n            ctx.lineWidth = 4;\r\n            ctx.stroke();\r\n        }\r\n    };\r\n};\r\n\r\n/**\r\n * Creates a starry auroraBorealis animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const auroraBorealis = (canvas, ctx) => {\r\n    let time = 0;\r\n    const colorStops = [\r\n        { pos: 0, color: 'rgba(0, 255, 128, 0.5)' },\r\n        { pos: 0.5, color: 'rgba(0, 128, 255, 0.5)' },\r\n        { pos: 1, color: 'rgba(128, 0, 255, 0.5)' }\r\n    ];\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 20, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n        time += 0.005;\r\n\r\n        for (let i = 0; i < 3; i++) {\r\n            const gradient = ctx.createLinearGradient(0, 0, canvas.width, 0);\r\n            colorStops.forEach(stop => {\r\n                gradient.addColorStop(stop.pos, stop.color);\r\n            });\r\n\r\n            ctx.beginPath();\r\n            for (let x = 0; x < canvas.width; x++) {\r\n                const y = Math.sin(x * 0.01 + time + i) * 50 +\r\n                    Math.sin(x * 0.02 - time * 1.5 + i) * 30 +\r\n                    canvas.height * (0.4 + i * 0.2);\r\n                ctx.lineTo(x, y);\r\n            }\r\n            ctx.lineTo(canvas.width, canvas.height);\r\n            ctx.lineTo(0, canvas.height);\r\n            ctx.closePath();\r\n\r\n            ctx.fillStyle = gradient;\r\n            ctx.fill();\r\n        }\r\n    };\r\n};\r\n\r\n/**\r\n * Creates a starry neonPulse animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const neonPulse = (canvas, ctx) => {\r\n    const circles = [];\r\n    const colors = ['#FF00FF', '#00FFFF', '#FFFF00', '#FF00AA'];\r\n\r\n    for (let i = 0; i < 20; i++) {\r\n        circles.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            radius: Math.random() * 50 + 20,\r\n            color: colors[Math.floor(Math.random() * colors.length)],\r\n            phase: Math.random() * Math.PI * 2\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        circles.forEach(circle => {\r\n            const glow = Math.sin(circle.phase) * 20 + 30;\r\n            const gradient = ctx.createRadialGradient(\r\n                circle.x, circle.y, 0,\r\n                circle.x, circle.y, circle.radius\r\n            );\r\n            gradient.addColorStop(0, circle.color);\r\n            gradient.addColorStop(1, 'rgba(0, 0, 0, 0)');\r\n\r\n            ctx.beginPath();\r\n            ctx.arc(circle.x, circle.y, circle.radius + glow, 0, Math.PI * 2);\r\n            ctx.fillStyle = gradient;\r\n            ctx.fill();\r\n\r\n            circle.phase += 0.05;\r\n        });\r\n    };\r\n};\r\n/**\r\n * Creates a starry cosmicDust animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const cosmicDust = (canvas, ctx) => {\r\n    const particles = [];\r\n    const particleCount = 300;\r\n\r\n    for (let i = 0; i < particleCount; i++) {\r\n        particles.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            size: Math.random() * 2 + 0.5,\r\n            speedX: (Math.random() - 0.5) * 0.5,\r\n            speedY: (Math.random() - 0.5) * 0.5,\r\n            color: `hsl(${Math.random() * 60 + 180}, 100%, 70%)`\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 20, 0.05)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        particles.forEach(particle => {\r\n            ctx.beginPath();\r\n            ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\r\n            ctx.fillStyle = particle.color;\r\n            ctx.fill();\r\n\r\n            particle.x += particle.speedX;\r\n            particle.y += particle.speedY;\r\n\r\n            if (particle.x < 0 || particle.x > canvas.width) particle.speedX *= -1;\r\n            if (particle.y < 0 || particle.y > canvas.height) particle.speedY *= -1;\r\n        });\r\n    };\r\n};\r\n/**\r\n * Creates a starry electricStorm animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const electricStorm = (canvas, ctx) => {\r\n    let time = 0;\r\n    const bolts = [];\r\n\r\n    function createBolt() {\r\n        const startX = Math.random() * canvas.width;\r\n        let x = startX;\r\n        let y = 0;\r\n        const points = [{ x, y }];\r\n\r\n        while (y < canvas.height) {\r\n            x += (Math.random() - 0.5) * 50;\r\n            y += Math.random() * 20 + 10;\r\n            points.push({ x, y });\r\n        }\r\n\r\n        return {\r\n            points,\r\n            life: 5 + Math.random() * 5,\r\n            width: Math.random() * 3 + 1\r\n        };\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 20, 0.2)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        time += 0.1;\r\n        if (Math.random() < 0.1) bolts.push(createBolt());\r\n\r\n        bolts.forEach((bolt, index) => {\r\n            ctx.beginPath();\r\n            ctx.moveTo(bolt.points[0].x, bolt.points[0].y);\r\n            for (let i = 1; i < bolt.points.length; i++) {\r\n                ctx.lineTo(bolt.points[i].x, bolt.points[i].y);\r\n            }\r\n            ctx.strokeStyle = `rgba(180, 220, 255, ${bolt.life / 10})`;\r\n            ctx.lineWidth = bolt.width;\r\n            ctx.stroke();\r\n\r\n            bolt.life -= 0.2;\r\n            if (bolt.life <= 0) bolts.splice(index, 1);\r\n        });\r\n    };\r\n};\r\n/**\r\n * Creates a starry quantumField animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const quantumField = (canvas, ctx) => {\r\n    const particles = [];\r\n    const particleCount = 100;\r\n\r\n    for (let i = 0; i < particleCount; i++) {\r\n        particles.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            size: Math.random() * 4 + 1,\r\n            speedX: (Math.random() - 0.5) * 2,\r\n            speedY: (Math.random() - 0.5) * 2,\r\n            hue: Math.random() * 360\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        particles.forEach(particle => {\r\n            particle.x += particle.speedX;\r\n            particle.y += particle.speedY;\r\n\r\n            if (particle.x < 0 || particle.x > canvas.width) particle.speedX *= -1;\r\n            if (particle.y < 0 || particle.y > canvas.height) particle.speedY *= -1;\r\n\r\n            ctx.beginPath();\r\n            ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\r\n            ctx.fillStyle = `hsla(${particle.hue}, 100%, 50%, 0.8)`;\r\n            ctx.fill();\r\n\r\n            particles.forEach(otherParticle => {\r\n                const dx = particle.x - otherParticle.x;\r\n                const dy = particle.y - otherParticle.y;\r\n                const distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n                if (distance < 100) {\r\n                    ctx.beginPath();\r\n                    ctx.moveTo(particle.x, particle.y);\r\n                    ctx.lineTo(otherParticle.x, otherParticle.y);\r\n                    ctx.strokeStyle = `hsla(${(particle.hue + otherParticle.hue) / 2}, 100%, 50%, ${1 - distance / 100})`;\r\n                    ctx.stroke();\r\n                }\r\n            });\r\n\r\n            particle.hue = (particle.hue + 0.5) % 360;\r\n        });\r\n    };\r\n};\r\n/**\r\n * Creates a starry geometricShapes animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const geometricShapes = (canvas, ctx) => {\r\n    const shapes = [];\r\n    const shapeCount = 50;\r\n\r\n    for (let i = 0; i < shapeCount; i++) {\r\n        shapes.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            size: Math.random() * 30 + 10,\r\n            type: Math.floor(Math.random() * 3),\r\n            rotation: Math.random() * Math.PI * 2,\r\n            speed: Math.random() * 0.5 + 0.1,\r\n            color: `hsl(${Math.random() * 360}, 70%, 50%)`\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n        shapes.forEach(shape => {\r\n            ctx.save();\r\n            ctx.translate(shape.x, shape.y);\r\n            ctx.rotate(shape.rotation);\r\n            ctx.fillStyle = shape.color;\r\n\r\n            switch (shape.type) {\r\n                case 0: // Square\r\n                    ctx.fillRect(-shape.size / 2, -shape.size / 2, shape.size, shape.size);\r\n                    break;\r\n                case 1: // Circle\r\n                    ctx.beginPath();\r\n                    ctx.arc(0, 0, shape.size / 2, 0, Math.PI * 2);\r\n                    ctx.fill();\r\n                    break;\r\n                case 2: // Triangle\r\n                    ctx.beginPath();\r\n                    ctx.moveTo(0, -shape.size / 2);\r\n                    ctx.lineTo(shape.size / 2, shape.size / 2);\r\n                    ctx.lineTo(-shape.size / 2, shape.size / 2);\r\n                    ctx.closePath();\r\n                    ctx.fill();\r\n                    break;\r\n            }\r\n\r\n            ctx.restore();\r\n\r\n            shape.rotation += shape.speed * 0.05;\r\n            shape.y += shape.speed;\r\n            if (shape.y > canvas.height + shape.size) {\r\n                shape.y = -shape.size;\r\n                shape.x = Math.random() * canvas.width;\r\n            }\r\n        });\r\n    };\r\n};\r\n/**\r\n * Creates a starry fireflies animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const fireflies = (canvas, ctx) => {\r\n    const fireflies = [];\r\n    const fireflyCount = 100;\r\n\r\n    for (let i = 0; i < fireflyCount; i++) {\r\n        fireflies.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            size: Math.random() * 3 + 1,\r\n            speed: Math.random() * 0.5 + 0.1,\r\n            brightness: Math.random(),\r\n            angle: Math.random() * Math.PI * 2\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        fireflies.forEach(firefly => {\r\n            firefly.brightness += Math.random() * 0.1 - 0.05;\r\n            firefly.brightness = Math.max(0, Math.min(1, firefly.brightness));\r\n\r\n            ctx.beginPath();\r\n            ctx.arc(firefly.x, firefly.y, firefly.size, 0, Math.PI * 2);\r\n            ctx.fillStyle = `rgba(255, 255, 100, ${firefly.brightness})`;\r\n            ctx.fill();\r\n\r\n            firefly.x += Math.cos(firefly.angle) * firefly.speed;\r\n            firefly.y += Math.sin(firefly.angle) * firefly.speed;\r\n\r\n            if (firefly.x < 0 || firefly.x > canvas.width || firefly.y < 0 || firefly.y > canvas.height) {\r\n                firefly.angle += Math.PI;\r\n            }\r\n\r\n            if (Math.random() < 0.01) {\r\n                firefly.angle = Math.random() * Math.PI * 2;\r\n            }\r\n        });\r\n    };\r\n};\r\n/**\r\n * Creates a starry matrixRain animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const matrixRain = (canvas, ctx) => {\r\n    const columns = Math.floor(canvas.width / 20);\r\n    const drops = [];\r\n\r\n    for (let i = 0; i < columns; i++) {\r\n        drops[i] = Math.random() * canvas.height;\r\n    }\r\n\r\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%^&*()_+[]{}|;:,.<>?';\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        ctx.fillStyle = '#0F0';\r\n        ctx.font = '15px monospace';\r\n\r\n        for (let i = 0; i < drops.length; i++) {\r\n            const text = characters[Math.floor(Math.random() * characters.length)];\r\n            ctx.fillText(text, i * 20, drops[i] * 20);\r\n\r\n            if (drops[i] * 20 > canvas.height && Math.random() > 0.975) {\r\n                drops[i] = 0;\r\n            }\r\n            drops[i] += 0.6;\r\n        }\r\n    };\r\n};\r\n\r\n/**\r\n * Creates a starry dnaHelix animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const dnaHelix = (canvas, ctx) => {\r\n    const speed = 0.02\r\n    const baseRadius = 100\r\n    const amplitude = 50\r\n    const nucleotideSize = 5\r\n    let t = 0;\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        ctx.save();\r\n        ctx.translate(canvas.width / 2, canvas.height / 2);\r\n\r\n        for (let i = 0; i < 2; i++) {\r\n            ctx.beginPath();\r\n            for (let x = -canvas.width / 2; x < canvas.width / 2; x += 10) {\r\n                const y = Math.sin(x * 0.01 + t + i * Math.PI) * amplitude;\r\n                const r = baseRadius + y;\r\n                ctx.lineTo(x, r);\r\n            }\r\n            ctx.strokeStyle = i === 0 ? 'rgba(255, 0, 0, 0.5)' : 'rgba(0, 0, 255, 0.5)';\r\n            ctx.lineWidth = 2;\r\n            ctx.stroke();\r\n\r\n            // Draw nucleotides\r\n            for (let x = -canvas.width / 2; x < canvas.width / 2; x += 40) {\r\n                const y = Math.sin(x * 0.01 + t + i * Math.PI) * amplitude;\r\n                const r = baseRadius + y;\r\n                ctx.fillStyle = i === 0 ? 'rgba(255, 255, 0, 0.8)' : 'rgba(0, 255, 0, 0.8)';\r\n                ctx.beginPath();\r\n                ctx.arc(x, r, nucleotideSize, 0, Math.PI * 2);\r\n                ctx.fill();\r\n            }\r\n        }\r\n\r\n        ctx.restore();\r\n        t += speed;\r\n    };\r\n}\r\n/**\r\n * Creates a starry neuralNetwork animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const neuralNetwork = (canvas, ctx) => {\r\n    const nodeCount = 30;\r\n    const connectionProbability = 0.2;\r\n    const speed = 0.3;\r\n    const nodes = [];\r\n    const connections = [];\r\n\r\n    // Create background gradient\r\n    const backgroundGradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);\r\n    backgroundGradient.addColorStop(0, '#000000');\r\n    backgroundGradient.addColorStop(1, '#1a1a2e');\r\n\r\n    for (let i = 0; i < nodeCount; i++) {\r\n        nodes.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            vx: (Math.random() - 0.5) * speed,\r\n            vy: (Math.random() - 0.5) * speed,\r\n            size: Math.random() * 2 + 2\r\n        });\r\n    }\r\n\r\n    // Pre-compute connections\r\n    for (let i = 0; i < nodes.length; i++) {\r\n        for (let j = i + 1; j < nodes.length; j++) {\r\n            if (Math.random() < connectionProbability) {\r\n                connections.push([i, j]);\r\n            }\r\n        }\r\n    }\r\n\r\n    return () => {\r\n        // Draw background\r\n        ctx.fillStyle = backgroundGradient;\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        // Update and draw nodes\r\n        nodes.forEach((node, index) => {\r\n            node.x += node.vx;\r\n            node.y += node.vy;\r\n\r\n            if (node.x < 0 || node.x > canvas.width) node.vx *= -1;\r\n            if (node.y < 0 || node.y > canvas.height) node.vy *= -1;\r\n\r\n            ctx.beginPath();\r\n            ctx.arc(node.x, node.y, node.size, 0, Math.PI * 2);\r\n            ctx.fillStyle = `hsl(${index * (360 / nodeCount)}, 100%, 50%)`;\r\n            ctx.fill();\r\n\r\n            // Add glow effect\r\n            ctx.beginPath();\r\n            ctx.arc(node.x, node.y, node.size + 3, 0, Math.PI * 2);\r\n            const gradient = ctx.createRadialGradient(node.x, node.y, node.size, node.x, node.y, node.size + 3);\r\n            gradient.addColorStop(0, `hsla(${index * (360 / nodeCount)}, 100%, 50%, 0.8)`);\r\n            gradient.addColorStop(1, `hsla(${index * (360 / nodeCount)}, 100%, 50%, 0)`);\r\n            ctx.fillStyle = gradient;\r\n            ctx.fill();\r\n        });\r\n\r\n        // Draw connections\r\n        connections.forEach(([i, j]) => {\r\n            const dx = nodes[i].x - nodes[j].x;\r\n            const dy = nodes[i].y - nodes[j].y;\r\n            const distance = Math.sqrt(dx * dx + dy * dy);\r\n            const opacity = 1 - distance / Math.max(canvas.width, canvas.height);\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(nodes[i].x, nodes[i].y);\r\n            ctx.lineTo(nodes[j].x, nodes[j].y);\r\n            ctx.strokeStyle = `rgba(255, 255, 255, ${opacity * 0.2})`;\r\n            ctx.stroke();\r\n        });\r\n\r\n        // Add subtle particle effect\r\n        for (let i = 0; i < 5; i++) {\r\n            ctx.beginPath();\r\n            ctx.arc(Math.random() * canvas.width, Math.random() * canvas.height, Math.random() * 1.5, 0, Math.PI * 2);\r\n            ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';\r\n            ctx.fill();\r\n        }\r\n    };\r\n}\r\n/**\r\n * Creates a starry oceanWaves animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const oceanWaves = (canvas, ctx) => {\r\n    const waveCount = 7;\r\n    const amplitude = 30;\r\n    const frequency = 0.02;\r\n    const speed = 0.03;\r\n    let time = 0;\r\n\r\n    // Create sky gradient\r\n    const skyGradient = ctx.createLinearGradient(0, 0, 0, canvas.height * 0.6);\r\n    skyGradient.addColorStop(0, '#87CEEB');\r\n    skyGradient.addColorStop(1, '#E0F6FF');\r\n\r\n    // Create sun\r\n    const sun = {\r\n        x: canvas.width * 0.8,\r\n        y: canvas.height * 0.2,\r\n        radius: 40,\r\n        glow: 20\r\n    };\r\n\r\n    // Create clouds\r\n    const clouds = [\r\n        { x: canvas.width * 0.1, y: canvas.height * 0.15, radius: 30 },\r\n        { x: canvas.width * 0.3, y: canvas.height * 0.1, radius: 40 },\r\n        { x: canvas.width * 0.6, y: canvas.height * 0.2, radius: 35 }\r\n    ];\r\n\r\n    return () => {\r\n        // Draw sky\r\n        ctx.fillStyle = skyGradient;\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height * 0.6);\r\n\r\n        // Draw sun\r\n        ctx.save();\r\n        ctx.beginPath();\r\n        ctx.arc(sun.x, sun.y, sun.radius, 0, Math.PI * 2);\r\n        const sunGradient = ctx.createRadialGradient(sun.x, sun.y, sun.radius - sun.glow, sun.x, sun.y, sun.radius + sun.glow);\r\n        sunGradient.addColorStop(0, 'rgba(255, 255, 0, 1)');\r\n        sunGradient.addColorStop(0.8, 'rgba(255, 255, 0, 0.3)');\r\n        sunGradient.addColorStop(1, 'rgba(255, 255, 0, 0)');\r\n        ctx.fillStyle = sunGradient;\r\n        ctx.fill();\r\n        ctx.restore();\r\n\r\n        // Draw clouds\r\n        clouds.forEach(cloud => {\r\n            ctx.beginPath();\r\n            ctx.arc(cloud.x, cloud.y, cloud.radius, 0, Math.PI * 2);\r\n            ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\r\n            ctx.fill();\r\n        });\r\n\r\n        // Draw ocean\r\n        for (let i = 0; i < waveCount; i++) {\r\n            ctx.beginPath();\r\n            ctx.moveTo(0, canvas.height);\r\n\r\n            for (let x = 0; x <= canvas.width; x += 5) {\r\n                const y = Math.sin(x * frequency + time + i * 0.5) * amplitude * (1 + i * 0.1) +\r\n                    (canvas.height - (i + 1) * (canvas.height * 0.4 / waveCount));\r\n                ctx.lineTo(x, y);\r\n            }\r\n\r\n            ctx.lineTo(canvas.width, canvas.height);\r\n            const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);\r\n            gradient.addColorStop(0, `rgba(0, 100, 255, ${0.1 + (i / waveCount) * 0.15})`);\r\n            gradient.addColorStop(1, `rgba(0, 50, 200, ${0.1 + (i / waveCount) * 0.15})`);\r\n            ctx.fillStyle = gradient;\r\n            ctx.fill();\r\n        }\r\n\r\n        time += speed;\r\n    };\r\n}\r\n/**\r\n * Creates a starry snowFall animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const snowFall = (canvas, ctx) => {\r\n    const snowflakeCount = 200;\r\n    const snowflakes = [];\r\n    const backgroundGradient = ctx.createLinearGradient(0, 0, 0, canvas.height);\r\n    backgroundGradient.addColorStop(0, '#0c1445');\r\n    backgroundGradient.addColorStop(1, '#1c2754');\r\n\r\n    // Create moon\r\n    const moon = {\r\n        x: canvas.width * 0.8,\r\n        y: canvas.height * 0.2,\r\n        radius: 50,\r\n        glow: 20\r\n    };\r\n\r\n    // Create mountains\r\n    const mountains = [\r\n        { points: [[0, canvas.height], [canvas.width * 0.3, canvas.height * 0.7], [canvas.width * 0.5, canvas.height]], color: '#0a1128' },\r\n        { points: [[canvas.width * 0.4, canvas.height], [canvas.width * 0.7, canvas.height * 0.75], [canvas.width, canvas.height]], color: '#0d1636' }\r\n    ];\r\n\r\n    for (let i = 0; i < snowflakeCount; i++) {\r\n        snowflakes.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            vx: (Math.random() - 0.5) * 1.5,\r\n            vy: Math.random() * 1 + 0.5,\r\n            size: Math.random() * 3 + 1,\r\n            opacity: Math.random() * 0.5 + 0.5\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = backgroundGradient;\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        // Draw moon\r\n        ctx.save();\r\n        ctx.beginPath();\r\n        ctx.arc(moon.x, moon.y, moon.radius, 0, Math.PI * 2);\r\n        const moonGradient = ctx.createRadialGradient(moon.x, moon.y, moon.radius - moon.glow, moon.x, moon.y, moon.radius + moon.glow);\r\n        moonGradient.addColorStop(0, 'rgba(255, 255, 230, 1)');\r\n        moonGradient.addColorStop(0.5, 'rgba(255, 255, 230, 0.3)');\r\n        moonGradient.addColorStop(1, 'rgba(255, 255, 230, 0)');\r\n        ctx.fillStyle = moonGradient;\r\n        ctx.fill();\r\n        ctx.restore();\r\n\r\n        // Draw mountains\r\n        mountains.forEach(mountain => {\r\n            ctx.beginPath();\r\n            ctx.moveTo(mountain.points[0][0], mountain.points[0][1]);\r\n            mountain.points.forEach(point => ctx.lineTo(point[0], point[1]));\r\n            ctx.fillStyle = mountain.color;\r\n            ctx.fill();\r\n        });\r\n\r\n        snowflakes.forEach(flake => {\r\n            flake.x += flake.vx + Math.sin(flake.y * 0.01) * 0.3;\r\n            flake.y += flake.vy;\r\n\r\n            if (flake.y > canvas.height) {\r\n                flake.x = Math.random() * canvas.width;\r\n                flake.y = -flake.size;\r\n                flake.vx = (Math.random() - 0.5) * 1.5;\r\n                flake.vy = Math.random() * 1 + 0.5;\r\n            }\r\n\r\n            ctx.beginPath();\r\n            ctx.arc(flake.x, flake.y, flake.size, 0, Math.PI * 2);\r\n            ctx.fillStyle = `rgba(255, 255, 255, ${flake.opacity})`;\r\n            ctx.fill();\r\n        });\r\n\r\n        // Add a subtle glow effect\r\n        ctx.fillStyle = 'rgba(255, 255, 255, 0.03)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n    };\r\n}\r\n\r\n/**\r\n * Creates a starry fireflyForest animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const fireflyForest = (canvas, ctx) => {\r\n    const fireflies = [];\r\n    const fireflyCount = 100;\r\n    const trees = [];\r\n    const treeCount = 5;\r\n\r\n    // Create trees\r\n    for (let i = 0; i < treeCount; i++) {\r\n        trees.push({\r\n            x: Math.random() * canvas.width,\r\n            y: canvas.height,\r\n            height: Math.random() * 200 + 300,\r\n            width: Math.random() * 100 + 50\r\n        });\r\n    }\r\n\r\n    // Create fireflies\r\n    for (let i = 0; i < fireflyCount; i++) {\r\n        fireflies.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            radius: Math.random() * 2 + 1,\r\n            speed: Math.random() * 0.5 + 0.1,\r\n            angle: Math.random() * Math.PI * 2,\r\n            angleSpeed: (Math.random() - 0.5) * 0.01,\r\n            glowIntensity: Math.random()\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        // Night sky\r\n        ctx.fillStyle = 'rgba(0, 0, 20, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        // Draw trees\r\n        trees.forEach(tree => {\r\n            ctx.beginPath();\r\n            ctx.moveTo(tree.x, tree.y);\r\n            ctx.lineTo(tree.x - tree.width / 2, tree.y - tree.height);\r\n            ctx.lineTo(tree.x + tree.width / 2, tree.y - tree.height);\r\n            ctx.closePath();\r\n            ctx.fillStyle = 'rgba(0, 50, 0, 0.8)';\r\n            ctx.fill();\r\n        });\r\n\r\n        // Update and draw fireflies\r\n        fireflies.forEach(fly => {\r\n            fly.x += Math.cos(fly.angle) * fly.speed;\r\n            fly.y += Math.sin(fly.angle) * fly.speed;\r\n            fly.angle += fly.angleSpeed;\r\n\r\n            if (fly.x < 0 || fly.x > canvas.width) fly.angle = Math.PI - fly.angle;\r\n            if (fly.y < 0 || fly.y > canvas.height) fly.angle = -fly.angle;\r\n\r\n            fly.glowIntensity = Math.sin(Date.now() * 0.002 + fly.x * 0.1) * 0.5 + 0.5;\r\n\r\n            ctx.beginPath();\r\n            ctx.arc(fly.x, fly.y, fly.radius, 0, Math.PI * 2);\r\n            ctx.fillStyle = `rgba(255, 255, 100, ${fly.glowIntensity})`;\r\n            ctx.fill();\r\n\r\n            ctx.beginPath();\r\n            ctx.arc(fly.x, fly.y, fly.radius * 3, 0, Math.PI * 2);\r\n            const gradient = ctx.createRadialGradient(fly.x, fly.y, 0, fly.x, fly.y, fly.radius * 3);\r\n            gradient.addColorStop(0, `rgba(255, 255, 100, ${fly.glowIntensity * 0.5})`);\r\n            gradient.addColorStop(1, 'rgba(255, 255, 100, 0)');\r\n            ctx.fillStyle = gradient;\r\n            ctx.fill();\r\n        });\r\n    };\r\n};\r\n/**\r\n * Creates a starry realisticClouds animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const realisticClouds = (canvas, ctx) => {\r\n    const clouds = [];\r\n    const cloudCount = 10;\r\n    let gradientHeight;\r\n\r\n    function createCloud(x, y) {\r\n        const particleCount = Math.floor(Math.random() * 50) + 50;\r\n        const particles = [];\r\n\r\n        for (let i = 0; i < particleCount; i++) {\r\n            particles.push({\r\n                x: x + Math.random() * 200 - 100,\r\n                y: y + Math.random() * 100 - 50,\r\n                radius: Math.random() * 30 + 10\r\n            });\r\n        }\r\n\r\n        return {\r\n            particles,\r\n            x,\r\n            y,\r\n            speed: Math.random() * 0.5 + 0.1\r\n        };\r\n    }\r\n\r\n    for (let i = 0; i < cloudCount; i++) {\r\n        clouds.push(createCloud(Math.random() * canvas.width, Math.random() * (canvas.height / 2)));\r\n    }\r\n\r\n    // Create gradient for the sky\r\n    const createSkyGradient = () => {\r\n        gradientHeight = canvas.height;\r\n        const gradient = ctx.createLinearGradient(0, 0, 0, gradientHeight);\r\n        gradient.addColorStop(0, '#1e90ff');  // Dodger Blue\r\n        gradient.addColorStop(0.5, '#87ceeb'); // Sky Blue\r\n        gradient.addColorStop(1, '#e6f3ff');  // Very Light Blue\r\n        return gradient;\r\n    }\r\n\r\n    let skyGradient = createSkyGradient();\r\n\r\n    return () => {\r\n        // Redraw sky gradient if canvas size has changed\r\n        if (gradientHeight !== canvas.height) {\r\n            skyGradient = createSkyGradient();\r\n        }\r\n\r\n        // Draw sky\r\n        ctx.fillStyle = skyGradient;\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        clouds.forEach(cloud => {\r\n            cloud.x += cloud.speed;\r\n            if (cloud.x > canvas.width + 200) {\r\n                cloud.x = -200;\r\n            }\r\n\r\n            ctx.save();\r\n            ctx.translate(cloud.x, cloud.y);\r\n\r\n            // Draw cloud shadow\r\n            cloud.particles.forEach(particle => {\r\n                ctx.beginPath();\r\n                ctx.arc(particle.x + 5, particle.y + 5, particle.radius, 0, Math.PI * 2);\r\n                ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\r\n                ctx.fill();\r\n            });\r\n\r\n            // Draw cloud\r\n            cloud.particles.forEach(particle => {\r\n                ctx.beginPath();\r\n                ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2);\r\n                const gradient = ctx.createRadialGradient(particle.x, particle.y, 0, particle.x, particle.y, particle.radius);\r\n                gradient.addColorStop(0, 'rgba(255, 255, 255, 0.8)');\r\n                gradient.addColorStop(1, 'rgba(255, 255, 255, 0.2)');\r\n                ctx.fillStyle = gradient;\r\n                ctx.fill();\r\n            });\r\n\r\n            ctx.restore();\r\n        });\r\n\r\n        // Optional: Add sun\r\n        const sunRadius = 40;\r\n        const sunGlow = 20;\r\n        ctx.beginPath();\r\n        ctx.arc(canvas.width - 100, 100, sunRadius, 0, Math.PI * 2);\r\n        const sunGradient = ctx.createRadialGradient(canvas.width - 100, 100, 0, canvas.width - 100, 100, sunRadius + sunGlow);\r\n        sunGradient.addColorStop(0, 'rgba(255, 255, 200, 1)');\r\n        sunGradient.addColorStop(0.8, 'rgba(255, 255, 0, 0.3)');\r\n        sunGradient.addColorStop(1, 'rgba(255, 255, 0, 0)');\r\n        ctx.fillStyle = sunGradient;\r\n        ctx.fill();\r\n    };\r\n};\r\n/**\r\n * Creates a starry autumnLeaves animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const autumnLeaves = (canvas, ctx) => {\r\n    const leaves = [];\r\n    const leafCount = 100;\r\n    const leafColors = ['#ff6b6b', '#feca57', '#ff9ff3', '#ff9f43', '#e17055'];\r\n    const leafImages = [\r\n        '1.jpg',\r\n        '2.jpg',\r\n    ];\r\n    const leafImagesLoaded = [];\r\n    let imagesLoaded = false;\r\n\r\n    // Load images\r\n    const loadImages = () => {\r\n        let loadedCount = 0;\r\n        leafImages.forEach((src, index) => {\r\n            const img = new Image();\r\n            img.onload = () => {\r\n                leafImagesLoaded[index] = img;\r\n                loadedCount++;\r\n                if (loadedCount === leafImages.length) {\r\n                    imagesLoaded = true;\r\n                }\r\n            };\r\n            img.onerror = () => {\r\n                loadedCount++;\r\n                if (loadedCount === leafImages.length) {\r\n                    imagesLoaded = true;\r\n                }\r\n            };\r\n            img.src = src;\r\n        });\r\n    };\r\n\r\n    loadImages();\r\n\r\n    for (let i = 0; i < leafCount; i++) {\r\n        leaves.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            size: Math.random() * 20 + 10,\r\n            speed: Math.random() * 2 + 1,\r\n            amplitude: Math.random() * 20 + 10,\r\n            angle: Math.random() * Math.PI * 2,\r\n            angleSpeed: (Math.random() - 0.5) * 0.05,\r\n            imageIndex: Math.floor(Math.random() * leafImages.length),\r\n            color: leafColors[Math.floor(Math.random() * leafColors.length)]\r\n        });\r\n    }\r\n\r\n    const drawLeaf = (leaf) => {\r\n        ctx.save();\r\n        ctx.translate(leaf.x, leaf.y);\r\n        ctx.rotate(leaf.angle);\r\n\r\n        if (imagesLoaded && leafImagesLoaded[leaf.imageIndex]) {\r\n            ctx.drawImage(leafImagesLoaded[leaf.imageIndex], -leaf.size / 2, -leaf.size / 2, leaf.size, leaf.size);\r\n        } else {\r\n            // Fallback: draw a colored oval if image is not available\r\n            ctx.beginPath();\r\n            ctx.ellipse(0, 0, leaf.size / 2, leaf.size / 4, 0, 0, Math.PI * 2);\r\n            ctx.fillStyle = leaf.color;\r\n            ctx.fill();\r\n        }\r\n\r\n        ctx.restore();\r\n    };\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(135, 206, 235, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        leaves.forEach(leaf => {\r\n            leaf.y += leaf.speed;\r\n            leaf.x += Math.sin(leaf.y * 0.01) * leaf.amplitude * 0.05;\r\n            leaf.angle += leaf.angleSpeed;\r\n\r\n            if (leaf.y > canvas.height) {\r\n                leaf.y = -leaf.size;\r\n                leaf.x = Math.random() * canvas.width;\r\n            }\r\n\r\n            drawLeaf(leaf);\r\n        });\r\n    };\r\n};\r\n/**\r\n * Creates a starry realisticRain animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const realisticRain = (canvas, ctx) => {\r\n    const raindrops = [];\r\n    const dropCount = 1000;\r\n    const splashes = [];\r\n\r\n    for (let i = 0; i < dropCount; i++) {\r\n        raindrops.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            length: Math.random() * 20 + 10,\r\n            speed: Math.random() * 10 + 15\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        // Draw and update raindrops\r\n        ctx.strokeStyle = 'rgba(174, 194, 224, 0.5)';\r\n        ctx.lineWidth = 1;\r\n        raindrops.forEach(drop => {\r\n            ctx.beginPath();\r\n            ctx.moveTo(drop.x, drop.y);\r\n            ctx.lineTo(drop.x, drop.y + drop.length);\r\n            ctx.stroke();\r\n\r\n            drop.y += drop.speed;\r\n\r\n            if (drop.y > canvas.height) {\r\n                drop.y = -drop.length;\r\n                splashes.push({\r\n                    x: drop.x,\r\n                    y: canvas.height,\r\n                    radius: Math.random() * 3 + 1,\r\n                    opacity: 1\r\n                });\r\n            }\r\n        });\r\n\r\n        // Draw and update splashes\r\n        splashes.forEach((splash, index) => {\r\n            ctx.beginPath();\r\n            ctx.arc(splash.x, splash.y, splash.radius, 0, Math.PI * 2);\r\n            ctx.fillStyle = `rgba(174, 194, 224, ${splash.opacity})`;\r\n            ctx.fill();\r\n\r\n            splash.radius += 0.1;\r\n            splash.opacity -= 0.03;\r\n\r\n            if (splash.opacity <= 0) {\r\n                splashes.splice(index, 1);\r\n            }\r\n        });\r\n    };\r\n};\r\n\r\n/**\r\n * Creates a starry fallingFoodFiesta animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const fallingFoodFiesta = (canvas, ctx) => {\r\n    const foodItems = [];\r\n    const foodTypes = ['🍔', '🍕', '🌭', '🍟', '🌮', '🍣', '🍩', '🍦', '🍎', '🍇', '🍓', '🍑', '🍍', '🥑', '🥕', '🥪', '🥨', '🧀', '🥐', '🥯', '🍱', '🍜', '🍙', '🍗', '🥟', '🥘', '🍤', '🥞', '🧇', '🥓'];\r\n    const numItems = 50;\r\n\r\n    // Lighter gradient colors\r\n    const colors = [\r\n        { r: 255, g: 102, b: 102 },  // Light Red\r\n        { r: 255, g: 178, b: 102 },  // Light Orange\r\n        { r: 255, g: 255, b: 153 },  // Light Yellow\r\n        { r: 153, g: 255, b: 153 },  // Light Green\r\n        { r: 153, g: 204, b: 255 },  // Light Blue\r\n        { r: 178, g: 102, b: 255 },  // Light Indigo\r\n        { r: 255, g: 153, b: 255 }   // Light Violet\r\n    ];\r\n\r\n    let colorIndex = 0;\r\n    let nextColorIndex = 1;\r\n    let colorT = 0;\r\n    const colorSpeed = 0.005;\r\n\r\n    for (let i = 0; i < numItems; i++) {\r\n        foodItems.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height - canvas.height,\r\n            emoji: foodTypes[Math.floor(Math.random() * foodTypes.length)],\r\n            size: Math.random() * 20 + 30,\r\n            speed: Math.random() * 1.5 + 0.5,\r\n            rotation: Math.random() * Math.PI * 2,\r\n            rotationSpeed: (Math.random() * 2 - 1) * 0.02\r\n        });\r\n    }\r\n\r\n    const lerpColor = (color1, color2, t) => {\r\n        return {\r\n            r: Math.round(color1.r + (color2.r - color1.r) * t),\r\n            g: Math.round(color1.g + (color2.g - color1.g) * t),\r\n            b: Math.round(color1.b + (color2.b - color1.b) * t)\r\n        };\r\n    };\r\n\r\n    return () => {\r\n        // Update gradient colors\r\n        colorT += colorSpeed;\r\n        if (colorT >= 1) {\r\n            colorT = 0;\r\n            colorIndex = nextColorIndex;\r\n            nextColorIndex = (nextColorIndex + 1) % colors.length;\r\n        }\r\n        const currentColor = lerpColor(colors[colorIndex], colors[nextColorIndex], colorT);\r\n\r\n        // Create moving gradient with lighter colors\r\n        const gradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);\r\n        gradient.addColorStop(0, `rgb(${currentColor.r}, ${currentColor.g}, ${currentColor.b})`);\r\n        gradient.addColorStop(1, `rgb(${255 - currentColor.r}, ${255 - currentColor.g}, ${255 - currentColor.b})`);\r\n\r\n        // Apply blur effect to the gradient\r\n        ctx.filter = 'blur(5px)';\r\n\r\n        // Draw gradient background\r\n        ctx.fillStyle = gradient;\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        // Reset filter for subsequent drawing\r\n        ctx.filter = 'none';\r\n\r\n        // Draw food items\r\n        foodItems.forEach(item => {\r\n            ctx.save();\r\n            ctx.translate(item.x, item.y);\r\n            ctx.rotate(item.rotation);\r\n            ctx.font = `${item.size}px Arial`;\r\n            ctx.textAlign = 'center';\r\n            ctx.textBaseline = 'middle';\r\n\r\n            // Add a white outline for better visibility\r\n            ctx.strokeStyle = 'white';\r\n            ctx.lineWidth = 3;\r\n            ctx.strokeText(item.emoji, 0, 0);\r\n\r\n            // Fill with black for contrast\r\n            ctx.fillStyle = 'black';\r\n            ctx.fillText(item.emoji, 0, 0);\r\n            ctx.restore();\r\n\r\n            item.y += item.speed;\r\n            item.rotation += item.rotationSpeed;\r\n            if (item.y > canvas.height + item.size) {\r\n                item.y = -item.size;\r\n                item.x = Math.random() * canvas.width;\r\n            }\r\n        });\r\n    };\r\n};\r\n/**\r\n * Creates a starry hauntedForest animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const hauntedForest = (canvas, ctx) => {\r\n    const trees = [];\r\n    const fireflies = [];\r\n    const fog = [];\r\n\r\n    // Initialize trees\r\n    for (let i = 0; i < 20; i++) {\r\n        trees.push({\r\n            x: Math.random() * canvas.width,\r\n            height: Math.random() * 200 + 100,\r\n            width: Math.random() * 20 + 10,\r\n        });\r\n    }\r\n\r\n    // Initialize fireflies\r\n    for (let i = 0; i < 50; i++) {\r\n        fireflies.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            radius: Math.random() * 2 + 1,\r\n            speed: Math.random() * 0.5 + 0.1,\r\n            opacity: Math.random(),\r\n        });\r\n    }\r\n\r\n    // Initialize fog\r\n    for (let i = 0; i < 100; i++) {\r\n        fog.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            radius: Math.random() * 50 + 20,\r\n            speed: Math.random() * 0.2 + 0.1,\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = '#0a0a0a';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        // Draw trees\r\n        ctx.fillStyle = '#1a1a1a';\r\n        trees.forEach(tree => {\r\n            ctx.beginPath();\r\n            ctx.moveTo(tree.x, canvas.height);\r\n            ctx.lineTo(tree.x - tree.width / 2, canvas.height - tree.height);\r\n            ctx.lineTo(tree.x + tree.width / 2, canvas.height - tree.height);\r\n            ctx.closePath();\r\n            ctx.fill();\r\n        });\r\n\r\n        // Draw fog\r\n        ctx.fillStyle = 'rgba(200, 200, 200, 0.05)';\r\n        fog.forEach(particle => {\r\n            ctx.beginPath();\r\n            ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2);\r\n            ctx.fill();\r\n\r\n            particle.x += particle.speed;\r\n            if (particle.x > canvas.width + particle.radius) {\r\n                particle.x = -particle.radius;\r\n            }\r\n        });\r\n\r\n        // Draw fireflies\r\n        fireflies.forEach(firefly => {\r\n            ctx.beginPath();\r\n            ctx.arc(firefly.x, firefly.y, firefly.radius, 0, Math.PI * 2);\r\n            ctx.fillStyle = `rgba(255, 255, 100, ${firefly.opacity})`;\r\n            ctx.fill();\r\n\r\n            firefly.x += Math.sin(Date.now() * 0.001) * firefly.speed;\r\n            firefly.y += Math.cos(Date.now() * 0.001) * firefly.speed;\r\n            firefly.opacity = Math.sin(Date.now() * 0.01) * 0.5 + 0.5;\r\n\r\n            if (firefly.x < 0) firefly.x = canvas.width;\r\n            if (firefly.x > canvas.width) firefly.x = 0;\r\n            if (firefly.y < 0) firefly.y = canvas.height;\r\n            if (firefly.y > canvas.height) firefly.y = 0;\r\n        });\r\n    };\r\n};\r\n/**\r\n * Creates a starry ghostlyApparitions animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const ghostlyApparitions = (canvas, ctx) => {\r\n    const ghosts = [];\r\n    const numGhosts = 5;\r\n\r\n    for (let i = 0; i < numGhosts; i++) {\r\n        ghosts.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            size: Math.random() * 50 + 30,\r\n            speed: Math.random() * 0.5 + 0.1,\r\n            opacity: Math.random() * 0.5,\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = '#000033';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        ghosts.forEach(ghost => {\r\n            ctx.beginPath();\r\n            ctx.moveTo(ghost.x, ghost.y);\r\n            ctx.bezierCurveTo(\r\n                ghost.x - ghost.size / 2, ghost.y - ghost.size / 2,\r\n                ghost.x - ghost.size / 2, ghost.y + ghost.size / 2,\r\n                ghost.x, ghost.y + ghost.size\r\n            );\r\n            ctx.bezierCurveTo(\r\n                ghost.x + ghost.size / 2, ghost.y + ghost.size / 2,\r\n                ghost.x + ghost.size / 2, ghost.y - ghost.size / 2,\r\n                ghost.x, ghost.y\r\n            );\r\n\r\n            const gradient = ctx.createRadialGradient(\r\n                ghost.x, ghost.y, 0,\r\n                ghost.x, ghost.y, ghost.size\r\n            );\r\n            gradient.addColorStop(0, `rgba(255, 255, 255, ${ghost.opacity})`);\r\n            gradient.addColorStop(1, 'rgba(255, 255, 255, 0)');\r\n\r\n            ctx.fillStyle = gradient;\r\n            ctx.fill();\r\n\r\n            ghost.y -= ghost.speed;\r\n            ghost.opacity = Math.sin(Date.now() * 0.001) * 0.2 + 0.3;\r\n\r\n            if (ghost.y + ghost.size < 0) {\r\n                ghost.y = canvas.height + ghost.size;\r\n                ghost.x = Math.random() * canvas.width;\r\n            }\r\n        });\r\n    };\r\n};\r\n/**\r\n * Creates a starry spiderwebOverlay animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const spiderwebOverlay = (canvas, ctx) => {\r\n    const webs = [];\r\n    const numWebs = 20;\r\n\r\n    for (let i = 0; i < numWebs; i++) {\r\n        webs.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            size: Math.random() * 100 + 50,\r\n            rotation: Math.random() * Math.PI * 2,\r\n        });\r\n    }\r\n\r\n    const drawWeb = (x, y, size, rotation) => {\r\n        ctx.save();\r\n        ctx.translate(x, y);\r\n        ctx.rotate(rotation);\r\n\r\n        ctx.beginPath();\r\n        for (let i = 0; i < 8; i++) {\r\n            const angle = (Math.PI * 2 / 8) * i;\r\n            ctx.moveTo(0, 0);\r\n            ctx.lineTo(Math.cos(angle) * size, Math.sin(angle) * size);\r\n        }\r\n\r\n        for (let r = size / 4; r < size; r += size / 4) {\r\n            ctx.moveTo(r, 0);\r\n            for (let i = 1; i < 8; i++) {\r\n                const angle = (Math.PI * 2 / 8) * i;\r\n                ctx.lineTo(Math.cos(angle) * r, Math.sin(angle) * r);\r\n            }\r\n            ctx.closePath();\r\n        }\r\n\r\n        ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';\r\n        ctx.stroke();\r\n        ctx.restore();\r\n    };\r\n\r\n    return () => {\r\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n        webs.forEach(web => {\r\n            drawWeb(web.x, web.y, web.size, web.rotation);\r\n        });\r\n    };\r\n};\r\n\r\n/**\r\n * Creates a starry undeadGraveyard animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const undeadGraveyard = (canvas, ctx) => {\r\n    const graves = [];\r\n    const zombies = [];\r\n    const fog = [];\r\n\r\n    // Initialize graves\r\n    for (let i = 0; i < 15; i++) {\r\n        graves.push({\r\n            x: Math.random() * canvas.width,\r\n            y: canvas.height - Math.random() * 100 - 50,\r\n            width: Math.random() * 30 + 20,\r\n            height: Math.random() * 40 + 30\r\n        });\r\n    }\r\n\r\n    // Initialize zombies\r\n    for (let i = 0; i < 10; i++) {\r\n        zombies.push({\r\n            x: Math.random() * canvas.width,\r\n            y: canvas.height,\r\n            speed: Math.random() * 0.5 + 0.1,\r\n            size: Math.random() * 30 + 20\r\n        });\r\n    }\r\n\r\n    // Initialize fog\r\n    for (let i = 0; i < 50; i++) {\r\n        fog.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            radius: Math.random() * 100 + 50,\r\n            speed: Math.random() * 0.2 + 0.1\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        // Dark, eerie sky\r\n        const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);\r\n        gradient.addColorStop(0, '#0a0a1a');\r\n        gradient.addColorStop(1, '#1a0a1a');\r\n        ctx.fillStyle = gradient;\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        // Moon\r\n        ctx.beginPath();\r\n        ctx.arc(canvas.width * 0.8, canvas.height * 0.2, 40, 0, Math.PI * 2);\r\n        ctx.fillStyle = 'rgba(255, 255, 200, 0.8)';\r\n        ctx.fill();\r\n\r\n        // Draw graves\r\n        ctx.fillStyle = '#333';\r\n        graves.forEach(grave => {\r\n            ctx.fillRect(grave.x, grave.y, grave.width, grave.height);\r\n            ctx.fillStyle = '#222';\r\n            ctx.fillRect(grave.x + grave.width * 0.1, grave.y, grave.width * 0.8, grave.height * 0.1);\r\n        });\r\n\r\n        // Draw zombies\r\n        zombies.forEach(zombie => {\r\n            ctx.beginPath();\r\n            ctx.arc(zombie.x, zombie.y - zombie.size, zombie.size * 0.5, 0, Math.PI * 2);\r\n            ctx.fillStyle = '#3a5';\r\n            ctx.fill();\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(zombie.x, zombie.y - zombie.size);\r\n            ctx.lineTo(zombie.x - zombie.size * 0.5, zombie.y);\r\n            ctx.lineTo(zombie.x + zombie.size * 0.5, zombie.y);\r\n            ctx.closePath();\r\n            ctx.fillStyle = '#3a5';\r\n            ctx.fill();\r\n\r\n            zombie.y -= zombie.speed;\r\n            if (zombie.y < canvas.height * 0.7) {\r\n                zombie.y = canvas.height;\r\n                zombie.x = Math.random() * canvas.width;\r\n            }\r\n        });\r\n\r\n        // Draw fog\r\n        ctx.fillStyle = 'rgba(255, 255, 255, 0.05)';\r\n        fog.forEach(particle => {\r\n            ctx.beginPath();\r\n            ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2);\r\n            ctx.fill();\r\n\r\n            particle.x += particle.speed;\r\n            if (particle.x > canvas.width + particle.radius) {\r\n                particle.x = -particle.radius;\r\n            }\r\n        });\r\n    };\r\n};\r\n/**\r\n * Creates a starry bloodRain animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const bloodRain = (canvas, ctx) => {\r\n    const drops = [];\r\n    const splats = [];\r\n\r\n    for (let i = 0; i < 200; i++) {\r\n        drops.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            length: Math.random() * 20 + 10,\r\n            speed: Math.random() * 5 + 5\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(20, 0, 0, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        // Draw rain\r\n        ctx.strokeStyle = '#800';\r\n        ctx.lineWidth = 1;\r\n        drops.forEach(drop => {\r\n            ctx.beginPath();\r\n            ctx.moveTo(drop.x, drop.y);\r\n            ctx.lineTo(drop.x, drop.y + drop.length);\r\n            ctx.stroke();\r\n\r\n            drop.y += drop.speed;\r\n\r\n            if (drop.y > canvas.height) {\r\n                drop.y = 0;\r\n                drop.x = Math.random() * canvas.width;\r\n\r\n                // Create a splat\r\n                splats.push({\r\n                    x: drop.x,\r\n                    y: canvas.height,\r\n                    size: Math.random() * 5 + 2,\r\n                    opacity: 1\r\n                });\r\n            }\r\n        });\r\n\r\n        // Draw splats\r\n        splats.forEach((splat, index) => {\r\n            ctx.beginPath();\r\n            ctx.arc(splat.x, splat.y, splat.size, 0, Math.PI * 2);\r\n            ctx.fillStyle = `rgba(128, 0, 0, ${splat.opacity})`;\r\n            ctx.fill();\r\n\r\n            splat.opacity -= 0.005;\r\n            if (splat.opacity <= 0) {\r\n                splats.splice(index, 1);\r\n            }\r\n        });\r\n    };\r\n};\r\n/**\r\n * Creates a starry creepyCrawlies animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const creepyCrawlies = (canvas, ctx) => {\r\n    const bugs = [];\r\n    const webNodes = [];\r\n\r\n    for (let i = 0; i < 50; i++) {\r\n        bugs.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            size: Math.random() * 5 + 2,\r\n            speedX: Math.random() * 2 - 1,\r\n            speedY: Math.random() * 2 - 1\r\n        });\r\n    }\r\n\r\n    for (let i = 0; i < 20; i++) {\r\n        webNodes.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        // Draw web\r\n        ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';\r\n        ctx.beginPath();\r\n        webNodes.forEach((node, index) => {\r\n            webNodes.slice(index + 1).forEach(otherNode => {\r\n                ctx.moveTo(node.x, node.y);\r\n                ctx.lineTo(otherNode.x, otherNode.y);\r\n            });\r\n        });\r\n        ctx.stroke();\r\n\r\n        // Draw and move bugs\r\n        ctx.fillStyle = '#400';\r\n        bugs.forEach(bug => {\r\n            ctx.beginPath();\r\n            ctx.arc(bug.x, bug.y, bug.size, 0, Math.PI * 2);\r\n            ctx.fill();\r\n\r\n            bug.x += bug.speedX;\r\n            bug.y += bug.speedY;\r\n\r\n            if (bug.x < 0 || bug.x > canvas.width) bug.speedX *= -1;\r\n            if (bug.y < 0 || bug.y > canvas.height) bug.speedY *= -1;\r\n\r\n            // Occasionally change direction\r\n            if (Math.random() < 0.01) {\r\n                bug.speedX = Math.random() * 2 - 1;\r\n                bug.speedY = Math.random() * 2 - 1;\r\n            }\r\n        });\r\n    };\r\n};","/**\r\n * @fileoverview Animated Text Component for React applications\r\n * @module AnimatedText\r\n * @requires react\r\n * @version 1.0.0\r\n */\r\n\r\nimport React, { useState, useEffect } from 'react';\r\n\r\n/**\r\n * @typedef {Object} AnimatedTextConfig\r\n * @property {number} [speed=100] - Animation speed in milliseconds\r\n * @property {boolean} [loop=false] - Whether to loop the animation\r\n * @property {number} [delay=0] - Delay before animation starts\r\n * @property {string} [color='currentColor'] - Text color\r\n */\r\n\r\n/**\r\n * @typedef {Object} AnimatedTextProps\r\n * @property {string} text - The text to animate\r\n * @property {('typewriter'|'fadeIn'|'bounce'|'glitch'|'rainbow')} [effect='typewriter'] - Animation effect\r\n * @property {AnimatedTextConfig} [config] - Animation configuration\r\n * @property {Object} [styles] - Custom CSS styles\r\n */\r\n\r\nclass TextErrorBoundary extends React.Component {\r\n    state = { hasError: false };\r\n\r\n    static getDerivedStateFromError(error) {\r\n        return { hasError: true };\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <span>Animation failed to load.</span>;\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\n/**\r\n * AnimatedText Component\r\n * @param {AnimatedTextProps} props - Component props\r\n * @returns {React.ReactElement} Rendered component\r\n */\r\nconst AnimatedText = ({\r\n    text = '',\r\n    effect = 'typewriter',\r\n    config = {},\r\n    styles = {}\r\n}) => {\r\n    const defaultConfig = {\r\n        speed: 100,\r\n        loop: false,\r\n        delay: 0,\r\n        color: 'currentColor',\r\n        ...config\r\n    };\r\n\r\n    const defaultStyles = {\r\n        base: {\r\n            display: 'inline-block',\r\n            fontFamily: 'inherit',\r\n            color: defaultConfig.color,\r\n        },\r\n        typewriter: {\r\n            whiteSpace: 'pre',\r\n            overflow: 'hidden',\r\n            borderRight: '0.15em solid currentColor',\r\n        },\r\n        fadeIn: {\r\n            opacity: 0,\r\n            animation: 'fadeIn 2s forwards',\r\n        },\r\n        bounce: {\r\n            display: 'inline-block',\r\n        },\r\n        glitch: {\r\n            position: 'relative',\r\n            animation: 'glitch 1s linear infinite',\r\n        },\r\n        rainbow: {\r\n            background: 'linear-gradient(to right, #6666ff, #0099ff , #00ff00, #ff3399, #6666ff)',\r\n            backgroundSize: '400%',\r\n            backgroundClip: 'text',\r\n            WebkitBackgroundClip: 'text',\r\n            WebkitTextFillColor: 'transparent',\r\n            animation: 'rainbow 8s ease infinite',\r\n        }\r\n    };\r\n\r\n    const effects = {\r\n        typewriter: (text) => {\r\n            const [displayText, setDisplayText] = useState('');\r\n            const [isAnimating, setIsAnimating] = useState(true);\r\n\r\n            useEffect(() => {\r\n                if (!text) {\r\n                    setIsAnimating(false);\r\n                    return;\r\n                }\r\n\r\n                const startAnimation = () => {\r\n                    let i = 0;\r\n                    setDisplayText('');\r\n                    setIsAnimating(true);\r\n\r\n                    const timer = setInterval(() => {\r\n                        try {\r\n                            if (i < text.length) {\r\n                                setDisplayText(prev => prev + text[i]);\r\n                                i++;\r\n                            } else {\r\n                                setIsAnimating(false);\r\n                                if (defaultConfig.loop) {\r\n                                    setTimeout(startAnimation, defaultConfig.delay);\r\n                                }\r\n                                clearInterval(timer);\r\n                            }\r\n                        } catch (error) {\r\n                            console.error('Animation error:', error);\r\n                            clearInterval(timer);\r\n                            setIsAnimating(false);\r\n                        }\r\n                    }, defaultConfig.speed);\r\n\r\n                    return timer;\r\n                };\r\n\r\n                const timer = setTimeout(startAnimation, defaultConfig.delay);\r\n                return () => clearTimeout(timer);\r\n            }, [text, defaultConfig.loop, defaultConfig.speed, defaultConfig.delay]);\r\n\r\n            return (\r\n                <span\r\n                    style={{\r\n                        ...defaultStyles.base,\r\n                        ...defaultStyles.typewriter,\r\n                        ...styles,\r\n                        borderRight: isAnimating ? '0.15em solid currentColor' : 'none'\r\n                    }}\r\n                    aria-label={text}\r\n                >\r\n                    {displayText}\r\n                </span>\r\n            );\r\n        },\r\n\r\n        fadeIn: (text) => (\r\n            <span\r\n                style={{\r\n                    ...defaultStyles.base,\r\n                    ...defaultStyles.fadeIn,\r\n                    ...styles\r\n                }}\r\n            >\r\n                {text}\r\n            </span>\r\n        ),\r\n\r\n        bounce: (text) => (\r\n            <span style={{ ...defaultStyles.base, ...styles }}>\r\n                {text.split('').map((char, i) => (\r\n                    <span\r\n                        key={i}\r\n                        style={{\r\n                            ...defaultStyles.bounce,\r\n                            animation: `bounce 0.5s ease infinite`,\r\n                            animationDelay: `${i * 0.1}s`\r\n                        }}\r\n                    >\r\n                        {char}\r\n                    </span>\r\n                ))}\r\n            </span>\r\n        ),\r\n\r\n        glitch: (text) => (\r\n            <span style={{ ...defaultStyles.base, ...defaultStyles.glitch, ...styles }}>\r\n                {text}\r\n                <span className=\"glitch-effect\" data-text={text}></span>\r\n            </span>\r\n        ),\r\n\r\n        rainbow: (text) => (\r\n            <span style={{ ...defaultStyles.base, ...defaultStyles.rainbow, ...styles }}>\r\n                {text}\r\n            </span>\r\n        )\r\n    };\r\n\r\n    useEffect(() => {\r\n        const styleSheet = document.createElement('style');\r\n        styleSheet.textContent = `\r\n      @keyframes fadeIn {\r\n        to { opacity: 1; }\r\n      }\r\n      @keyframes bounce {\r\n        0%, 100% { transform: translateY(0); }\r\n        50% { transform: translateY(-10px); }\r\n      }\r\n      @keyframes glitch {\r\n        2%, 64% { transform: translate(2px,0) skew(0deg); }\r\n        4%, 60% { transform: translate(-2px,0) skew(0deg); }\r\n        62% { transform: translate(0,0) skew(5deg); }\r\n      }\r\n      @keyframes rainbow { \r\n        0% { background-position: 0% 50%; }\r\n        50% { background-position: 100% 50%; }\r\n        100% { background-position: 0% 50%; }\r\n      }\r\n    `;\r\n        document.head.appendChild(styleSheet);\r\n        return () => document.head.removeChild(styleSheet);\r\n    }, []);\r\n\r\n    const safeText = typeof text === 'string' ? text : String(text || '');\r\n    const safeEffect = effects.hasOwnProperty(effect) ? effect : 'typewriter';\r\n\r\n    return (\r\n        <TextErrorBoundary>\r\n            {effects[safeEffect](safeText)}\r\n        </TextErrorBoundary>\r\n    );\r\n};\r\n\r\nexport default AnimatedText;","import React, { useRef, useEffect, useCallback } from 'react';\r\nimport {\r\n    starryNight, floatingBubbles,\r\n    gradientWave, particleNetwork, galaxySpiral,\r\n    rainbowWaves, geometricShapes, fireflies,\r\n    matrixRain, quantumField, electricStorm,\r\n    cosmicDust, neonPulse, auroraBorealis, oceanWaves,\r\n    neuralNetwork,\r\n    dnaHelix, snowFall, realisticRain, autumnLeaves, realisticClouds, fireflyForest, fallingFoodFiesta,\r\n    hauntedForest,\r\n    ghostlyApparitions,\r\n    spiderwebOverlay,\r\n    undeadGraveyard,\r\n    bloodRain,\r\n    creepyCrawlies,\r\n} from './backgroundAnimations';\r\nimport AnimatedText from './AnimatedText';\r\n\r\n/**\r\n * @module AnimatedBackground\r\n * @description A React component that creates animated canvas backgrounds with blend modes\r\n */\r\n\r\n/**\r\n * AnimatedBackground Component\r\n * @param {Object} props - Component props\r\n * @param {string} props.animationName - Name of the animation to display\r\n * @param {string} [props.fallbackAnimation='geometricShapes'] - Fallback animation if main animation fails\r\n * @param {number} [props.fps=60] - Frames per second for the animation\r\n * @param {string} [props.blendMode='normal'] - Canvas blend mode\r\n * @param {Object} [props.style] - Additional CSS styles for the canvas\r\n * @returns {React.Component} A canvas element with the animated background\r\n */\r\nconst AnimatedBackground = ({\r\n    animationName,\r\n    fallbackAnimation = 'geometricShapes',\r\n    fps = 60,\r\n    blendMode = 'normal',\r\n    style\r\n}) => {\r\n    const canvasRef = useRef(null);\r\n    const animationRef = useRef(null);\r\n    const blendModes = [\r\n        'normal',\r\n        'multiply',\r\n        'screen',\r\n        'overlay',\r\n        'darken',\r\n        'lighten',\r\n        'color-dodge',\r\n        'color-burn',\r\n        'hard-light',\r\n        'soft-light',\r\n        'difference',\r\n        'exclusion',\r\n        'hue',\r\n        'saturation',\r\n        'color',\r\n        'luminosity'\r\n    ];\r\n\r\n    const setupCanvas = useCallback(() => {\r\n        const canvas = canvasRef.current;\r\n        const ctx = canvas.getContext('2d');\r\n        canvas.width = window.innerWidth;\r\n        canvas.height = window.innerHeight;\r\n\r\n        // Set blend mode\r\n        ctx.globalCompositeOperation = blendModes.includes(blendMode)\r\n            ? blendMode\r\n            : 'normal';\r\n\r\n        const animations = {\r\n            starryNight, floatingBubbles, gradientWave, particleNetwork, galaxySpiral,\r\n            rainbowWaves, geometricShapes, fireflies, matrixRain, quantumField,\r\n            electricStorm, cosmicDust, neonPulse, auroraBorealis, oceanWaves,\r\n            neuralNetwork, dnaHelix, snowFall, realisticRain, realisticClouds,\r\n            fireflyForest, autumnLeaves, fallingFoodFiesta, hauntedForest,\r\n            ghostlyApparitions,\r\n            spiderwebOverlay,\r\n            undeadGraveyard,\r\n            bloodRain,\r\n            creepyCrawlies,\r\n        };\r\n\r\n        let animation = animations[animationName];\r\n\r\n        if (!animation) {\r\n            console.warn(`Animation \"${animationName}\" not found. Using fallback animation.`);\r\n            animation = animations[fallbackAnimation] || animations.geometricShapes;\r\n        }\r\n\r\n        return animation(canvas, ctx);\r\n    }, [animationName, fallbackAnimation, blendMode]);\r\n\r\n    useEffect(() => {\r\n        const animate = () => {\r\n            const animation = setupCanvas();\r\n            let lastTime = 0;\r\n            const frameInterval = 1000 / fps;\r\n\r\n            const loop = (currentTime) => {\r\n                animationRef.current = requestAnimationFrame(loop);\r\n\r\n                const deltaTime = currentTime - lastTime;\r\n                if (deltaTime >= frameInterval) {\r\n                    lastTime = currentTime - (deltaTime % frameInterval);\r\n                    animation();\r\n                }\r\n            };\r\n\r\n            animationRef.current = requestAnimationFrame(loop);\r\n        };\r\n\r\n        animate();\r\n\r\n        const handleResize = () => {\r\n            if (canvasRef.current) {\r\n                canvasRef.current.width = window.innerWidth;\r\n                canvasRef.current.height = window.innerHeight;\r\n                setupCanvas();\r\n            }\r\n        };\r\n\r\n        window.addEventListener('resize', handleResize);\r\n\r\n        return () => {\r\n            if (animationRef.current) {\r\n                cancelAnimationFrame(animationRef.current);\r\n            }\r\n            window.removeEventListener('resize', handleResize);\r\n        };\r\n    }, [fps, setupCanvas]);\r\n\r\n    return (\r\n        <canvas\r\n            ref={canvasRef}\r\n            style={{\r\n                position: 'fixed',\r\n                top: 0,\r\n                left: 0,\r\n                width: '100%',\r\n                height: '100%',\r\n                zIndex: -1,\r\n                ...style\r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\nexport {\r\n    AnimatedBackground,\r\n    starryNight,\r\n    floatingBubbles,\r\n    gradientWave,\r\n    particleNetwork,\r\n    galaxySpiral,\r\n    rainbowWaves,\r\n    geometricShapes,\r\n    fireflies,\r\n    matrixRain,\r\n    quantumField,\r\n    electricStorm,\r\n    cosmicDust,\r\n    neonPulse,\r\n    auroraBorealis,\r\n    fallingFoodFiesta,\r\n    hauntedForest,\r\n    ghostlyApparitions,\r\n    spiderwebOverlay,\r\n    undeadGraveyard,\r\n    bloodRain,\r\n    creepyCrawlies,\r\n    AnimatedText,\r\n\r\n\r\n\r\n};"],"names":["starryNight","canvas","ctx","stars","i","push","x","Math","random","width","y","height","radius","vx","floor","vy","twinkle","color","concat","fillStyle","fillRect","forEach","star","opacity","abs","sin","gradient","createRadialGradient","addColorStop","beginPath","arc","PI","fill","floatingBubbles","bubbles","speed","glowColor","bubble","gradientWave","time","createLinearGradient","moveTo","lineTo","strokeStyle","lineWidth","stroke","particleNetwork","particles","particle","length","j","dx","dy","distance","sqrt","galaxySpiral","arguments","undefined","starCount","angle","cos","initializeStars","rotation","save","translate","rotate","drawStars","restore","rainbowWaves","colors","auroraBorealis","colorStops","pos","_loop","stop","closePath","neonPulse","circles","phase","circle","glow","cosmicDust","size","speedX","speedY","electricStorm","bolts","points","life","createBolt","bolt","index","splice","quantumField","hue","otherParticle","geometricShapes","shapes","type","clearRect","shape","fireflies","brightness","firefly","max","min","matrixRain","columns","drops","characters","font","text","fillText","dnaHelix","t","r","neuralNetwork","nodes","connections","backgroundGradient","node","_ref","_ref2","_slicedToArray","oceanWaves","skyGradient","sun","clouds","sunGradient","cloud","snowFall","snowflakes","moon","mountains","moonGradient","mountain","point","flake","fireflyForest","trees","angleSpeed","glowIntensity","tree","fly","Date","now","realisticClouds","gradientHeight","createCloud","particleCount","createSkyGradient","sunRadius","autumnLeaves","loadedCount","leaves","leafColors","leafImages","leafImagesLoaded","imagesLoaded","src","img","Image","onload","onerror","amplitude","imageIndex","leaf","drawImage","ellipse","drawLeaf","realisticRain","raindrops","splashes","drop","splash","fallingFoodFiesta","foodItems","foodTypes","g","b","colorIndex","nextColorIndex","colorT","emoji","rotationSpeed","color1","color2","currentColor","round","filter","item","textAlign","textBaseline","strokeText","hauntedForest","fog","ghostlyApparitions","ghosts","ghost","bezierCurveTo","spiderwebOverlay","webs","web","drawWeb","undeadGraveyard","graves","zombies","grave","zombie","bloodRain","splats","splat","creepyCrawlies","bugs","webNodes","slice","otherNode","bug","TextErrorBoundary","_React$Component","_this","_classCallCheck","_len","args","Array","_key","_defineProperty","_callSuper","this","hasError","_inherits","React","Component","key","value","error","state","createElement","props","children","AnimatedText","_ref$text","_ref$effect","effect","_ref$config","config","_ref$styles","styles","defaultConfig","_objectSpread","loop","delay","defaultStyles","base","display","fontFamily","typewriter","whiteSpace","overflow","borderRight","fadeIn","animation","bounce","glitch","position","rainbow","background","backgroundSize","backgroundClip","WebkitBackgroundClip","WebkitTextFillColor","effects","_useState2","useState","displayText","setDisplayText","_useState4","isAnimating","setIsAnimating","useEffect","timer","setTimeout","startAnimation","setInterval","prev","clearInterval","console","clearTimeout","style","split","map","char","animationDelay","className","styleSheet","document","textContent","head","appendChild","removeChild","safeText","String","safeEffect","hasOwnProperty","AnimatedBackground","animationName","_ref$fallbackAnimatio","fallbackAnimation","_ref$fps","fps","_ref$blendMode","blendMode","canvasRef","useRef","animationRef","blendModes","setupCanvas","useCallback","current","getContext","window","innerWidth","innerHeight","globalCompositeOperation","includes","animations","warn","lastTime","frameInterval","requestAnimationFrame","currentTime","deltaTime","handleResize","addEventListener","cancelAnimationFrame","removeEventListener","ref","top","left","zIndex"],"mappings":"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"}